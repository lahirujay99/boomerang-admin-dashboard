//package com.boomerang.admindashboard.domain;
//
//import jakarta.persistence.*;
//import lombok.Data;
//import lombok.NoArgsConstructor;
//import lombok.AllArgsConstructor;
//import java.math.BigDecimal;
//
//import java.time.LocalDate;
//
//@Data // Lombok annotation to create getters, setters, toString, etc.
//@NoArgsConstructor // Lombok annotation for a no-argument constructor
//@AllArgsConstructor // Lombok annotation for a constructor with all arguments
//@Entity // Marks this class as a JPA entity
//@Table(name = "customers") // Specifies the table name in the database
//public class Customer {
//    @Id
//    @GeneratedValue(strategy = GenerationType.IDENTITY)
//    private Long id;
//
//    @Column(nullable = false)
//    private String fullName;
//
//    @Column(nullable = false, unique = true)
//    private String email;
//
//    @Column(nullable = false)
//    private LocalDate joinDate;
//
//    // We can add a column definition to specify precision for monetary values
//    @Column(precision = 10, scale = 2)
//    private Double totalSpend;
//}
//
///*
// *   `@Entity`: Tells JPA this is a database entity.
// *   `@Table`: Defines the table name.
// *   `@Id` and `@GeneratedValue`: Designate the `id` field as the primary key and specify that its value is auto-generated by the database.
// *   `@Column`: Used to specify details about the column, such as whether it can be `null` or must be `unique`.
// */


package com.boomerang.admindashboard.domain;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "customers")
public class Customer {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String fullName;

    @Column(nullable = false, unique = true)
    private String email;

    @Column(nullable = false)
    private LocalDate joinDate;

    // CHANGE Double to BigDecimal
    @Column(nullable = false, precision = 10, scale = 2)
    private BigDecimal totalSpend;

    // This tells JPA that one customer can have many sales.
    // "mappedBy" indicates that the 'customer' field in the Sale entity manages this relationship.
    // "cascade = CascadeType.ALL" is the magic part: it tells Hibernate to apply all
    // operations (including DELETES) from this Customer to its associated Sales.
    // "orphanRemoval = true" cleans up any sales that are disassociated from a customer.
    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private List<Sale> sales;
}